generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// /////////////////////////////////////////////////////////////////////////////////////////
model Test {
  id         String       @id @default(uuid())
  created_at DateTime?    @default(now())
  testrecord TestRecord[]
}

model Auth {
  id               String    @id @db.VarChar(25)
  password         String    @db.VarChar(255)
  logged_at        DateTime? @db.DateTime(0)
  user_type_id     Int
  active           Boolean?  @default(true)
  refresh_token    String?   @unique(map: "Auth_refresh_token_key") @db.VarChar(255)
  complete_profile Boolean?  @default(false)
  usertype         UserType  @relation(fields: [user_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "auth_ibfk_2")
  user             User?

  @@index([user_type_id], map: "user_type_id")
}

model TestRecord {
  id             Int        @id @default(autoincrement())
  test_id        String
  examiner_id    String     @db.VarChar(25)
  test_result_id Int
  test_type_id   Int
  user           User       @relation(fields: [examiner_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "test_ibfk_2")
  test           Test       @relation(fields: [test_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "test_ibfk_1")
  testresult     TestResult @relation(fields: [test_result_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "test_record_ibfk_1")
  testtype       TestType   @relation(fields: [test_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "test_ibfk_3")

  @@index([test_id], map: "test_ibfk_1")
  @@index([examiner_id], map: "test_ibfk_2")
  @@index([test_type_id], map: "test_ibfk_3")
  @@index([test_result_id], map: "test_record_ibfk_1")
}

model TestResult {
  id         Int          @id
  name       String       @db.VarChar(10)
  slug       String       @unique(map: "testResult_slug_key") @db.VarChar(10)
  testrecord TestRecord[]
}

model TestType {
  id         Int          @id
  name       String       @db.VarChar(10)
  slug       String       @unique(map: "testType_slug_key") @db.VarChar(10)
  testrecord TestRecord[]
}

model User {
  user_id    String       @id @db.VarChar(25)
  firstname  String?      @db.VarChar(255)
  lastname   String?      @db.VarChar(255)
  nic        String?      @db.VarChar(20)
  contact_no String?      @db.VarChar(10)
  email      String?      @db.VarChar(255)
  birthday   DateTime?    @db.Date
  created_at DateTime?    @default(now())
  auth       Auth         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_ibfk_2")
  testrecord TestRecord[]
}

model UserType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(10)
  slug String @unique(map: "userType_slug_key") @db.VarChar(10)
  auth Auth[]
}

model Patient {
  id         String   @id @db.VarChar(25)
  firstname  String   @db.VarChar(255)
  lastname   String   @db.VarChar(255)
  nic        String   @db.VarChar(20)
  contact_no String   @db.VarChar(10)
  email      String   @db.VarChar(255)
  birthday   DateTime @db.Date


  created_at DateTime? @db.Timestamp(0)

  gender_type_id Int
  gender_type    GenderType @relation(fields: [gender_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "patient_ibfk_2")

}

model GenderType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(10)
  slug String @unique(map:"gender_type_slug_key") @db.VarChar(10)
  patient Patient[]
}